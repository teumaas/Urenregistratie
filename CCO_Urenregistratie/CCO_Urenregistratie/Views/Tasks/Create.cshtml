@model CCO_Urenregistratie.Models.Tasks

@using (Html.BeginForm("Create", "Tasks", FormMethod.Post, new { role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="col-sm-offset-2 col-sm-8 box animated fadeIn">
        <div class="panel panel-cco">
            <div class="panel-heading expand-bar">

                <div class="col-sm-6 text-right">
                    <span class="fa fa-2x fa-folder-open"></span>
                </div>
                <div class="col-sm-6 pull-right panel-dropdown">
                    @Html.DropDownList("ProjectId", null, htmlAttributes: new { @class = "caption selecter_1", name = "selecter_basic" })
                </div>

            </div>
            <div class="panel-body">
                <form id="div1" method="post">
                    <div class="col-sm-12">
                        <div class="col-sm-12">
                            <div class="input-group form-search">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control search-query form-cco", placeholder = "Waar ben je meebezig?" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                <span class="input-group-btn">
                                    <button class="btn btn-cco" type="submit" data-type="last"><span class="fa fa-close" /></button>
                                    <button type="submit" class="btn btn-cco" role="button"><span class="fa fa-play" /></button>
                                </span>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.UserId, "UserId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("UserId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectId, "ProjectId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProjectId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Startdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Startdate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Startdate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Enddate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Enddate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Enddate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@model CCO_Urenregistratie.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
}

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-sm-24">
            <div class="col-sm-offset-2 col-sm-8 box animated zoomInRight">
                <div class="panel panel-cco">
                    <div class="panel-heading">
                        <h3 class="panel-title">Urenregistratie - Registratie</h3>
                    </div>
                    <div class="panel-body">
                        <div class="col-sm-12">
                            <div class="center-block logo-big"></div>
                        </div>

                        <div class="col-sm-12">
                            <div class="form-group">
                                <div class="input-group">
                                    <span class="info-cco input-group-addon"><i class="fa fa-user"></i></span>
                                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.FirstName), required = "required", autofocus = "autofocus" })
                                    @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger", @hidden = "true", @id = "1" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="input-group">
                                    <span class="info-cco input-group-addon"><i class="fa fa-user"></i></span>
                                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.LastName), required = "required", autofocus = "autofocus" })
                                    @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger", @hidden = "true", @id = "2" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="input-group">
                                    <span class="info-cco input-group-addon"><i class="fa fa-address-card"></i></span>
                                    @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.UserName), required = "required", autofocus = "autofocus" })
                                    @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "text-danger", @hidden = "true", @id = "3" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="input-group">
                                    <span class="info-cco input-group-addon"><i class="fa fa-envelope"></i></span>
                                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.Email), required = "required", autofocus = "autofocus" })
                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger", @hidden = "true", @id = "4" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="input-group">
                                    <span class="info-cco input-group-addon"><i class="fa fa-lock"></i></span>
                                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.Password), required = "required", autofocus = "autofocus" })
                                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger", @hidden = "true", @id = "5" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="input-group">
                                    <span class="info-cco input-group-addon"><i class="fa fa-lock"></i></span>
                                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", @placeholder = Html.DisplayNameFor(m => m.ConfirmPassword), required = "required", autofocus = "autofocus" })
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-7">
                            <a type="submit" id="submit" name="submit" class="btn btn-cco" role="button" href="javascript:history.go(-1)">
                                <span class="fa fa-undo"></span>
                                Terug
                            </a>

                            <button type="submit" id="submit" name="submit" class="btn btn-cco">
                                <span class="fa fa-user-plus"></span>
                                Registreren
                            </button>
                        </div>
                    </div>
                    <script type="text/javascript">
                        $(document).ready(function() {
                            $(submit).ready(function(){
                                $(submit).click(function(){
                                    var errors= [];
                                    var message =[];
                                    var index = 0;
                                    for (var i = 0; i < 6; i++) {
                                        if ( $("#"+(i+1)).hasClass("field-validation-error")) {
                                            errors.push($("#"+(i+1)).children("span").text());
                                        }
                                    }
                                    for (var i = 0; i < errors.length; i++) {
                                        message[index++] = errors[i];
                                        message[index++] = "<br>";
                                    }
                                    if (errors.length > 0) {
                                        toastr.error(message);
                                    }
                                  
                                });
                            });
                        });
                    </script>

                    @if (!ViewData.ModelState.IsValid)
                    {
                        <script type="text/javascript">
                            $(document).ready(function() {
                                var errors = @Html.Raw(Json.Encode(string.Join("<br>",
                            ViewData.ModelState
                            .Where(x => x.Value.Errors.Count > 0)
                            .SelectMany(x => x.Value.Errors)
                            .Select(error => error.ErrorMessage))));
                                toastr.error(errors).css("font-size", "15px");
                            });
                        </script>
                    }
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/toastr")
}
